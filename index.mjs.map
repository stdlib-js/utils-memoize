{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport identity from '@stdlib/utils-identity-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a memoized function.\n*\n* @param {Function} fcn - function to memoize\n* @param {Function} [hashFunction] - function to map a set of arguments to a single value identifying that set\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} memoized function\n*\n* @example\n* function factorial( n ) {\n*     var prod;\n*     var i;\n*     prod = 1;\n*     for ( i = n; i > 1; i-- ) {\n*         prod *= i;\n*     }\n*     return prod;\n* }\n*\n* var memoized = memoize( factorial );\n*\n* var v = memoized( 5 );\n* // returns 120\n*\n* v = memoized( 5 );\n* // returns 120\n*/\nfunction memoize( fcn, hashFunction ) {\n\tvar toKey;\n\tvar cache;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( arguments.length < 2 ) {\n\t\ttoKey = identity;\n\t} else {\n\t\ttoKey = hashFunction;\n\t\tif ( !isFunction( toKey ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Hash function argument must be a function. Value: `%s`.', toKey ) );\n\t\t}\n\t}\n\tcache = {};\n\tsetReadOnly( memoized, 'cache', cache );\n\treturn memoized;\n\n\t/**\n\t* Memoized function.\n\t*\n\t* @private\n\t* @param {...*} args - function arguments\n\t* @returns {*} memoized function result\n\t*/\n\tfunction memoized() {\n\t\tvar args;\n\t\tvar out;\n\t\tvar key;\n\t\tvar i;\n\t\targs = new Array( arguments.length );\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\t\tkey = toKey( args ).toString();\n\t\tif ( hasOwnProp( cache, key ) ) {\n\t\t\treturn cache[ key ];\n\t\t}\n\t\tout = fcn.apply( null, args );\n\t\tcache[ key ] = out;\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default memoize;\n"],"names":["memoize","fcn","hashFunction","toKey","cache","isFunction","TypeError","format","arguments","length","identity","setReadOnly","memoized","args","out","key","i","Array","toString","hasOwnProp","apply"],"mappings":";;ifA2DA,SAASA,EAASC,EAAKC,GACtB,IAAIC,EACAC,EACJ,IAAMC,EAAYJ,GACjB,MAAM,IAAIK,UAAWC,EAAQ,oEAAqEN,IAEnG,GAAKO,UAAUC,OAAS,EACvBN,EAAQO,OAGR,IAAML,EADNF,EAAQD,GAEP,MAAM,IAAII,UAAWC,EAAQ,4EAA6EJ,IAK5G,OADAQ,EAAaC,EAAU,QADvBR,EAAQ,CAAA,GAEDQ,EASP,SAASA,IACR,IAAIC,EACAC,EACAC,EACAC,EAEJ,IADAH,EAAO,IAAII,MAAOT,UAAUC,QACtBO,EAAI,EAAGA,EAAIR,UAAUC,OAAQO,IAClCH,EAAMG,GAAMR,UAAWQ,GAGxB,OADAD,EAAMZ,EAAOU,GAAOK,WACfC,EAAYf,EAAOW,GAChBX,EAAOW,IAEfD,EAAMb,EAAImB,MAAO,KAAMP,GACvBT,EAAOW,GAAQD,EACRA,EACP,CACF"}